import os
import time
import requests
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, Message, ContentType
)
from tinydb import TinyDB, Query
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ —Ñ–∞–π–ª—É –∑ –∫–æ–Ω—Ñ—ñ–≥–∞–º–∏
config_dir = os.path.join(os.path.dirname(__file__), "../config")
os.makedirs(config_dir, exist_ok=True)
users_path = os.path.join(config_dir, "users.json")
if not os.path.exists(users_path):
    with open(users_path, "w", encoding="utf-8") as f:
        f.write("{}")

db = TinyDB(users_path)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîê –õ–æ–≥—ñ–Ω –¥–æ –∞–∫–∞—É–Ω—Ç—É")],
        [KeyboardButton(text="üß∑ –ö–∞–Ω–∞–ª-–¥–∂–µ—Ä–µ–ª–æ"), KeyboardButton(text="üì§ –ö–∞–Ω–∞–ª-–ø—Ä–∏–π–º–∞—á")],
        [KeyboardButton(text="üß© –®–∞–±–ª–æ–Ω –ø–∞—Ä—Å–∏–Ω–≥—É"), KeyboardButton(text="üñã –®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É")],
        [KeyboardButton(text="üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤"), KeyboardButton(text="üîÅ –†–µ–∂–∏–º")],
        [KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø—É—Å–∫")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.is_chat_member()
    except Exception:
        return False

def get_user(user_id: int) -> dict:
    User = Query()
    user = db.get(User.user_id == user_id)
    if not user:
        now = int(time.time())
        db.insert({"user_id": user_id, "first_seen": now, "is_subscribed": False, "config": {}})
        user = db.get(User.user_id == user_id)
    return user

def update_user_config(user_id: int, key: str, value) -> None:
    User = Query()
    user = get_user(user_id)
    config = user.get("config", {})
    config[key] = value
    db.update({"config": config}, User.user_id == user_id)

# –°—Ç–∞—Ä—Ç
@dp.message(F.text, F.text.regexp(r"^/start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    now = int(time.time())

    if user_id == OWNER_ID:
        await message.answer("–í—ñ—Ç–∞—é, –≤–ª–∞—Å–Ω–∏–∫—É! –ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø.", reply_markup=main_kb)
        return

    first_seen = user["first_seen"]
    if now - first_seen < 86400:
        await message.answer("–í–∏ —É –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ (1 –¥–µ–Ω—å).", reply_markup=main_kb)
    else:
        if "phone" not in user.get("config", {}):
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É) —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=contact_kb)
        else:
            if await check_subscription(user_id):
                db.update({"is_subscribed": True}, Query().user_id == user_id)
                await message.answer("–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –ú–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º.", reply_markup=main_kb)
            else:
                sub_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
                    [InlineKeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_sub")]
                ])
                await message.answer("–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –≤–ª–∞—Å–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:", reply_markup=sub_kb)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è"
@dp.callback_query(F.data == "check_sub")
async def check_sub_callback(callback_query):
    user_id = callback_query.from_user.id
    if await check_subscription(user_id):
        db.update({"is_subscribed": True}, Query().user_id == user_id)
        await bot.send_message(user_id, "–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –ú–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º.", reply_markup=main_kb)
    else:
        await bot.send_message(user_id, "–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
                               reply_markup=callback_query.message.reply_markup)
    await callback_query.answer()

# –õ–æ–≥—ñ–Ω –¥–æ –∞–∫–∞—É–Ω—Ç—É
@dp.message(F.text == "üîê –õ–æ–≥—ñ–Ω –¥–æ –∞–∫–∞—É–Ω—Ç—É")
async def login_handler(message: Message):
    user = get_user(message.from_user.id)
    if "phone" not in user.get("config", {}):
        await message.answer("–©–æ–± —É–≤—ñ–π—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É):", reply_markup=contact_kb)
    else:
        await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä {user['config']['phone']} –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3 4 5 6 7):", reply_markup=None)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(F.content_type == ContentType.CONTACT)
async def contact_handler(message: Message):
    contact = message.contact
    if contact and contact.phone_number:
        update_user_config(message.from_user.id, "phone", contact.phone_number)
        await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_kb)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 3 4 5 6 7):")
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=contact_kb)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É (—Ü–∏—Ñ—Ä–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª) –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —á–µ—Ä–µ–∑ –≤–æ—Ä–∫–µ—Ä
@dp.message(F.text.regexp(r"^(\d\s*){5,}$"))
async def code_handler(message: Message):
    raw_code = message.text.strip()
    code = "".join(raw_code.split())
    update_user_config(message.from_user.id, "auth_code", code)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–¥ –≤–æ—Ä–∫–µ—Ä—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    user_id = message.from_user.id
    user = get_user(user_id)
    phone = user.get("config", {}).get("phone")
    try:
        resp = requests.post(
            "http://localhost:8000/check_code",  # –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞ –∞–¥—Ä–µ—Å—É –≤–∞—à–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            json={"user_id": user_id, "phone": phone, "code": code},
            timeout=5
        )
        if resp.status_code == 200:
            data = resp.json()
            if data.get("success"):
                await message.answer("–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞.", reply_markup=main_kb)
            else:
                await message.answer(f"–ö–æ–¥ –Ω–µ–≤—ñ—Ä–Ω–∏–π. {data.get('message', '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')}")
        else:
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ –≤–æ—Ä–∫–µ—Ä–∞: {resp.text}")
    except Exception as e:
        await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–¥: {e}")

# –ö–∞–Ω–∞–ª-–¥–∂–µ—Ä–µ–ª–æ
@dp.message(F.text == "üß∑ –ö–∞–Ω–∞–ª-–¥–∂–µ—Ä–µ–ª–æ")
async def source_handler(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–∞–Ω–∞–ª—É-–¥–∂–µ—Ä–µ–ª–∞:")
    
@dp.message(F.text.regexp(r"^@?\w+$"))
async def source_input(message: Message):
    if "source_channel" not in get_user(message.from_user.id).get("config", {}):
        source = message.text.strip()
        update_user_config(message.from_user.id, "source_channel", source)
        await message.answer("–ö–∞–Ω–∞–ª-–¥–∂–µ—Ä–µ–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_kb)

# –ö–∞–Ω–∞–ª-–ø—Ä–∏–π–º–∞—á
@dp.message(F.text == "üì§ –ö–∞–Ω–∞–ª-–ø—Ä–∏–π–º–∞—á")
async def target_handler(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ ID –∫–∞–Ω–∞–ª—É-–ø—Ä–∏–π–º–∞—á–∞:")

@dp.message(F.text.regexp(r"^@?\w+$"))
async def target_input(message: Message):
    if "target_channel" not in get_user(message.from_user.id).get("config", {}):
        target = message.text.strip()
        update_user_config(message.from_user.id, "target_channel", target)
        await message.answer("–ö–∞–Ω–∞–ª-–ø—Ä–∏–π–º–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_kb)

# –®–∞–±–ª–æ–Ω –ø–∞—Ä—Å–∏–Ω–≥—É
@dp.message(F.text == "üß© –®–∞–±–ª–æ–Ω –ø–∞—Ä—Å–∏–Ω–≥—É")
async def parse_template_handler(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É —É caption (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¶—ñ–Ω–∞ - [—Å—É–º–∞])")

@dp.message(F.text.regexp(r".*\[.*\].*"))
async def parse_template_input(message: Message):
    update_user_config(message.from_user.id, "parse_template", message.text.strip())
    await message.answer("–®–∞–±–ª–æ–Ω –ø–∞—Ä—Å–∏–Ω–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_kb)

# –®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É
@dp.message(F.text == "üñã –®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É")
async def new_caption_handler(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —à–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¶–µ–Ω–Ω–∏–∫: [1]+‚Ç¥)")

@dp.message(F.text.regexp(r".*\[.*\].*"))
async def new_caption_input(message: Message):
    update_user_config(message.from_user.id, "new_caption_template", message.text.strip())
    await message.answer("–®–∞–±–ª–æ–Ω –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_kb)

# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤
@dp.message(F.text == "üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤")
async def count_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å—ñ", callback_data="count_all")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="count_custom")]
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏:", reply_markup=kb)

@dp.callback_query(F.data.in_(["count_all", "count_custom"]))
async def count_callback_handler(callback_query):
    user_id = callback_query.from_user.id
    if callback_query.data == "count_all":
        update_user_config(user_id, "posts_count", "all")
        await bot.send_message(user_id, "–í–∏–±—Ä–∞–Ω–æ: –≤—Å—ñ –ø–æ—Å—Ç–∏.", reply_markup=main_kb)
    else:
        await bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤:")

@dp.message(F.text.regexp(r"^\d+$"))
async def count_input(message: Message):
    count = int(message.text.strip())
    update_user_config(message.from_user.id, "posts_count", count)
    await message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤: {count} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_kb)

# –†–µ–∂–∏–º
@dp.message(F.text == "üîÅ –†–µ–∂–∏–º")
async def mode_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ—Å–∏–ª–∫–∞", callback_data="mode_forward")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data="mode_edit")]
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:", reply_markup=kb)

@dp.callback_query(F.data.in_(["mode_forward", "mode_edit"]))
async def mode_callback_handler(callback_query):
    user_id = callback_query.from_user.id
    mode = "forward" if callback_query.data == "mode_forward" else "edit"
    update_user_config(user_id, "mode", mode)
    await bot.send_message(user_id,
                           f"–†–µ–∂–∏–º '{'–ü–µ—Ä–µ—Å–∏–ª–∫–∞' if mode == 'forward' else '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è'}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
                           reply_markup=main_kb)
    await callback_query.answer()

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø—É—Å–∫ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ API
@dp.message(F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø—É—Å–∫")
async def confirm_handler(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    config = user.get("config", {})
    try:
        resp = requests.post(
            "http://localhost:8000/start_task",
            json={"user_id": user_id, "config": config},
            timeout=5
        )
        if resp.status_code == 200:
            await message.answer(
                f"–í–∞—à–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:\n{config}\n\n–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ—Ä–∫–µ—Ä—É. –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É!",
                reply_markup=main_kb)
        else:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_kb)
    except Exception:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_kb)

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))